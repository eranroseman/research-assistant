[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_backend"

[project]
name = "research-assistant"
version = "0.2.0"
description = "AI-powered research assistant with knowledge base management"
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "Eran Roseman", email = "eran@example.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "click>=8.2.1",
    "faiss-cpu>=1.12.0",
    "numpy>=2.3.2",
    "pdfplumber>=0.11.7",
    "PyMuPDF>=1.26.3",
    "requests>=2.32.4",
    "sentence-transformers>=5.1.0",
    "torch>=2.8.0",
    "tqdm>=4.67.1",
    "transformers>=4.55.2",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.8.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
    "mypy>=1.17.1",
    "types-requests",
]

[project.scripts]
research-assistant = "src.cli:app"
build-kb = "src.build_kb:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.ruff]
# Target Python 3.11
target-version = "py311"

# Line length matching Black's default
line-length = 110

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "kb_data",
]

[tool.ruff.lint]
# Focus on high-value rules that catch real issues
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes (undefined names, unused imports)
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "UP",  # pyupgrade (Python 3.11+ syntax)
    "B",   # flake8-bugbear (likely bugs)
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez (timezone awareness)
    "S",   # flake8-bandit (security)
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501", # Line too long (formatter handles this)
    "W291", # Trailing whitespace (formatter handles)
    "W293", # Blank line with whitespace (formatter handles)
]

[tool.ruff.lint.per-file-ignores]
# Ignore security issues in tests
"test_*.py" = ["S"]

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["src"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Format docstrings
docstring-code-format = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Additional strictness flags
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
no_implicit_reexport = true
strict_optional = true

# Error output
show_error_codes = true
show_column_numbers = true
pretty = true

# Ignore missing imports for third-party libraries without stubs
ignore_missing_imports = true

# Namespace packages
namespace_packages = true
explicit_package_bases = true

# Cache
cache_dir = ".mypy_cache"
incremental = true

# Exclude patterns
exclude = ["kb_data/", ".venv/", "build/", "dist/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
