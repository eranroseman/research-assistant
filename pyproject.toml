[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_backend"

[project]
name = "research-assistant"
version = "0.2.0"
description = "AI-powered research assistant with knowledge base management"
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "Eran Roseman", email = "eran@example.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "click>=8.2.1",
    "faiss-cpu>=1.12.0",
    "numpy>=2.3.2",
    "pdfplumber>=0.11.7",
    "PyMuPDF>=1.26.3",
    "requests>=2.32.4",
    "sentence-transformers>=5.1.0",
    "torch>=2.8.0",
    "tqdm>=4.67.1",
    "transformers>=4.55.2",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.8.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
    "mypy>=1.17.1",
    "types-requests",
]

[project.scripts]
research-assistant = "src.cli:app"
build-kb = "src.build_kb:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.ruff]
# Target Python 3.11
target-version = "py311"

# Line length matching Black's default
line-length = 110

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "kb_data",
]

[tool.ruff.lint]
# Focus on high-value rules that catch real issues
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes (undefined names, unused imports)
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "UP",  # pyupgrade (Python 3.11+ syntax)
    "B",   # flake8-bugbear (likely bugs)
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez (timezone awareness)
    "S",   # flake8-bandit (security)
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules

    # Additional rules to preserve code quality
    "PL",    # Pylint rules (subset that doesn't require refactoring)
    "TRY",   # tryceratops (exception handling best practices)
    "FLY",   # flynt (static string formatting)
    "PERF",  # Performance anti-patterns
    "LOG",   # flake8-logging (logging best practices)
    "G",     # flake8-logging-format (logging string formatting)
    "PIE",   # flake8-pie (misc. lints)
    "PT",    # flake8-pytest-style (pytest conventions)
    "RSE",   # flake8-raise (exception raising)
    "RET",   # flake8-return (return statement checks)
    "TID",   # flake8-tidy-imports (import conventions)
    "ARG",   # flake8-unused-arguments
    "ERA",   # eradicate (commented-out code)
    "PGH",   # pygrep-hooks (misc. lints)
    "ASYNC", # flake8-async (async/await best practices)
    "T10",   # flake8-debugger (debugger imports)
    "D",     # pydocstyle (docstring conventions)

    # Additional code quality rules
    "COM",   # flake8-commas (trailing comma enforcement)
    "Q",     # flake8-quotes (quote consistency)
    "A",     # flake8-builtins (builtin shadowing prevention)
]

# Ignore specific rules
ignore = [
    "E501", # Line too long (formatter handles this)
    "W291", # Trailing whitespace (formatter handles)
    "W293", # Blank line with whitespace (formatter handles)
    "I001", # Import block is un-sorted (we have custom organization)
    "COM812", # Trailing comma (conflicts with formatter)

    # Security rules that are handled correctly in the code
    "S301", # pickle is not used, but rule might false positive
    "S603", # subprocess call - shell=False is safe
    "S607", # Starting process with partial path (paths are validated)

    # Style preferences that match existing code
    "TRY003",  # Avoid specifying long messages outside exception class (existing pattern)
    "TRY400",  # Use logging.exception instead of logging.error (existing pattern)
    "PLR0913", # Too many arguments to function call (some functions need many params)
    "PLR2004", # Magic value used in comparison (config constants are fine)
    "PLW2901", # Redefined loop variable (existing code pattern)

    # Performance rules that would change logic
    "PERF401", # Use list comprehension (some loops have side effects)

    # Pytest rules (tests not fully implemented yet)
    "PT001", # Use @pytest.fixture() over @pytest.fixture
    "PT023", # Use @pytest.mark over pytest.mark

    # "PTH116", # Use os.stat() alternatives - REMOVED: now using Path.stat()
    # "PTH118", # Use Path.joinpath() instead of os.path.join - REMOVED: now using Path operator
    # "PTH202", # Use Path.stat().st_size instead of os.path.getsize - REMOVED: now using Path.stat()

    # Import patterns (existing organization is intentional)
    "PLC0415", # Import outside top-level (lazy imports for performance)


    # Loop variables (existing patterns are intentional)
    "B007", # Unused loop control variable (used for counting)


    # Exception handling patterns
    "TRY300", # Consider else block (existing pattern is clearer)
    "TRY301", # Raise within try (existing pattern is intentional)


    # Unused arguments (Click decorators need them)
    "ARG001", # Unused function argument (Click commands)
    "ARG002", # Unused method argument

    # Return rules that would change logic
    "RET504", # Unnecessary variable assignment before return

    # Simplification rules that would change readability
    "SIM114", # Combine if branches (sometimes clearer separate)

    # Logging rules (not all apply to Click output)
    # "G004", # Logging statement uses f-string - REMOVED: f-strings in logging are fine

    # Import rules matching existing organization
    "TID252", # Relative imports (existing code uses them appropriately)
]

[tool.ruff.lint.per-file-ignores]
# Ignore security issues in tests
"test_*.py" = ["S", "PLR2004", "D"]
"tests/*.py" = ["S", "PLR2004", "D"]
# Allow try/except imports and import placement in main scripts
"src/cli.py" = [
    "E402",
    "F401",
    "PLR0912",
    "PLR0915",
] # Module imports, complex functions
"src/build_kb.py" = [
    "E402",
    "F401",
    "PLR0912",
    "PLR0915",
    "PLR0911",
] # Module imports, complex functions, returns
"src/cli_kb_index.py" = ["E402", "F401"] # Module imports not at top
# Configuration module doesn't need docstrings for constants
"src/config.py" = ["D"]
# __init__ files don't need module docstrings
"src/__init__.py" = ["D"]

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["src"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.ruff.lint.pylint]
# Allow reasonable complexity for research code
max-args = 10       # Some functions need many parameters
max-branches = 15   # Complex logic in search/scoring
max-returns = 6     # Multiple exit points OK
max-statements = 50 # Long functions acceptable for CLI commands

[tool.ruff.lint.mccabe]
# Cyclomatic complexity threshold
max-complexity = 15 # Allow moderately complex functions

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Format docstrings
docstring-code-format = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Additional strictness flags
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_any_generics = true
no_implicit_reexport = true
strict_optional = true

# Error output
show_error_codes = true
show_column_numbers = true
pretty = true

# Ignore missing imports for third-party libraries without stubs
ignore_missing_imports = true

# Namespace packages
namespace_packages = true
explicit_package_bases = true

# Cache
cache_dir = ".mypy_cache"
incremental = true

# Exclude patterns
exclude = ["kb_data/", ".venv/", "build/", "dist/"]

[[tool.mypy.overrides]]
module = ["src.cli", "src.build_kb"]
allow_redefinition = true
disable_error_code = ["no-redef"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
